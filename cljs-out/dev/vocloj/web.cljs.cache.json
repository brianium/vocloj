["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$vocloj.web","~:imports",null,"~:requires",["^ ","~$impl","~$vocloj.web.impl","^:","^:"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$create-recognizer",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/brian/projects/vocloj/src/cljs/vocloj/web.cljs","~:line",6,"~:column",7,"~:end-line",6,"~:end-column",24,"~:arglists",["~#list",["~$quote",["^G",[[],["~$options"],["^I","~$atom-fn"]]]]],"~:doc","Create a speech recognizer backed by native browser apis.\n   \n   When called with no arguments, the returned recognizer will be\n   configured to listen for single utterances, i.e used to detect an utterance\n   and then shut down:\n\n   ```clojure\n   (create-recognizer)\n   ```\n   \n   Optional arguments can be used to configure the recognizer when create-recognizer\n   is called with one argument:\n   \n   ```clojure\n   (create-recognizer {:continuous? true})\n   ```\n   \n   Supported options are\n     :continuous? boolean? - continuous recognizers continuously listen for speech until explicitly stopped\n   \n   When called with two arguments, an atom-fn can be given in addition to options. This may be useful\n   for using an alternative atom function like reagent's \"ratoms\".\n   \n   ```clojure\n   (create-recognizer {:continuous? true} r/atom)\n   ```","~:top-fn",["^ ","~:variadic?",false,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[[],["^I"],["^I","^J"]],"^F",["^G",[[],["^I"],["^I","^J"]]],"~:arglists-meta",["^G",[null,null,null]]]],"^5","~$vocloj.web/create-recognizer","^A","src/cljs/vocloj/web.cljs","^E",24,"^L",["^ ","^M",false,"^N",2,"^O",2,"^P",[[],["^I"],["^I","^J"]],"^F",["^G",[[],["^I"],["^I","^J"]]],"^Q",["^G",[null,null,null]]],"^P",[[],["^I"],["^I","^J"]],"~:protocol-impl",null,"^N",2,"^Q",["^G",[null,null,null]],"^C",1,"^M",false,"~:methods",[["^ ","^N",0,"^M",false,"~:tag","~$any"],["^ ","^N",1,"^M",false,"^U","^V"],["^ ","^N",2,"^M",false,"^U","^V"]],"^B",6,"^D",6,"^O",2,"~:fn-var",true,"^F",["^G",[[],["^I"],["^I","^J"]]],"^K","Create a speech recognizer backed by native browser apis.\n   \n   When called with no arguments, the returned recognizer will be\n   configured to listen for single utterances, i.e used to detect an utterance\n   and then shut down:\n\n   ```clojure\n   (create-recognizer)\n   ```\n   \n   Optional arguments can be used to configure the recognizer when create-recognizer\n   is called with one argument:\n   \n   ```clojure\n   (create-recognizer {:continuous? true})\n   ```\n   \n   Supported options are\n     :continuous? boolean? - continuous recognizers continuously listen for speech until explicitly stopped\n   \n   When called with two arguments, an atom-fn can be given in addition to options. This may be useful\n   for using an alternative atom function like reagent's \"ratoms\".\n   \n   ```clojure\n   (create-recognizer {:continuous? true} r/atom)\n   ```"],"~$create-synthesizer",["^ ","^?",null,"^@",["^ ","^A","/Users/brian/projects/vocloj/src/cljs/vocloj/web.cljs","^B",40,"^C",7,"^D",40,"^E",25,"^F",["^G",["^H",["^G",[[],["^J"]]]]],"^K","Create a speech synthesizer backed by native browser apis.\n   \n   When called with no arguments, a default synthesizer will be returned.\n\n   ```clojure\n   (create-synthesizer)\n   ```\n   \n   When called with two arguments, an atom-fn can be given. This may be useful\n   for using an alternative atom function like reagent's \"ratoms\".\n   \n   ```clojure\n   (create-synthesizer r/atom)\n   ```\n   \n   When calling [[vocloj.core/speak]] on a web backed synthesizer, the utterance map must\n   minimally contain a :text key.\n   \n   ```clojure\n   (speak synthesizer \"Alex\" {:text \"Hello from the browser!\"})\n   ```\n   \n   The following keys from the [SpeechSynthesisUtterance](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance) API are also supported:\n   \n     :lang - string?\n     :pitch - float?\n     :rate  - float?\n     :volume - float?","^L",["^ ","^M",false,"^N",1,"^O",1,"^P",[[],["^J"]],"^F",["^G",[[],["^J"]]],"^Q",["^G",[null,null]]]],"^5","~$vocloj.web/create-synthesizer","^A","src/cljs/vocloj/web.cljs","^E",25,"^L",["^ ","^M",false,"^N",1,"^O",1,"^P",[[],["^J"]],"^F",["^G",[[],["^J"]]],"^Q",["^G",[null,null]]],"^P",[[],["^J"]],"^S",null,"^N",1,"^Q",["^G",[null,null]],"^C",1,"^M",false,"^T",[["^ ","^N",0,"^M",false,"^U","^V"],["^ ","^N",1,"^M",false,"^U","^V"]],"^B",40,"^D",40,"^O",1,"^W",true,"^F",["^G",[[],["^J"]]],"^K","Create a speech synthesizer backed by native browser apis.\n   \n   When called with no arguments, a default synthesizer will be returned.\n\n   ```clojure\n   (create-synthesizer)\n   ```\n   \n   When called with two arguments, an atom-fn can be given. This may be useful\n   for using an alternative atom function like reagent's \"ratoms\".\n   \n   ```clojure\n   (create-synthesizer r/atom)\n   ```\n   \n   When calling [[vocloj.core/speak]] on a web backed synthesizer, the utterance map must\n   minimally contain a :text key.\n   \n   ```clojure\n   (speak synthesizer \"Alex\" {:text \"Hello from the browser!\"})\n   ```\n   \n   The following keys from the [SpeechSynthesisUtterance](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance) API are also supported:\n   \n     :lang - string?\n     :pitch - float?\n     :rate  - float?\n     :volume - float?"],"~$remove-listeners",["^ ","^?",null,"^@",["^ ","^A","/Users/brian/projects/vocloj/src/cljs/vocloj/web.cljs","^B",74,"^C",7,"^D",74,"^E",23,"^F",["^G",["^H",["^G",[["~$synth"]]]]],"^K","Remove global listeners from the single speechSynthesis object\n   present on the browser window. This is only relevant to the web synthesizer.\n   \n   This can be used in a reloaded environment to prevent hings like multiple on-voiceschanged\n   event listeners from being registered"],"^5","~$vocloj.web/remove-listeners","^A","src/cljs/vocloj/web.cljs","^E",23,"^P",["^G",[["^["]]],"^S",null,"^Q",["^G",[null,null]],"^C",1,"^M",false,"^B",74,"~:ret-tag","^V","^D",74,"^O",1,"^W",true,"^F",["^G",["^H",["^G",[["^["]]]]],"^K","Remove global listeners from the single speechSynthesis object\n   present on the browser window. This is only relevant to the web synthesizer.\n   \n   This can be used in a reloaded environment to prevent hings like multiple on-voiceschanged\n   event listeners from being registered"]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"^K","Provides speech recognition and synthesis via native web browser\n   APIs"]